{"ast":null,"code":"var _jsxFileName = \"/Users/briana/workspace/employee-directory-web/client/src/App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"; // Internal js imports\n\nimport Header from './Components/Header';\nimport Base from './Components/Base';\nimport Employees from './Components/Employees';\nimport Locations from './Components/Locations';\nimport Departments from './Components/Departments'; // Internal style imports\n\nimport './App.scss'; // TODO: include department support in API\n\nconst currDepartments = ['Department 1', 'Department 2', 'Department 3'];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      employees: [],\n      locations: [],\n      departments: [],\n      isLoaded: false\n    };\n    this.getAllEmployees = this.getAllEmployees.bind(this);\n    this.getAllLocations = this.getAllLocations.bind(this);\n    this.onEdit = this.onEdit.bind(this);\n    this.onCreate = this.onCreate.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n  }\n\n  componentDidMount() {\n    this.getAllEmployees();\n    this.getAllLocations();\n    this.setState({\n      loaded: true,\n      departments: currDepartments\n    });\n  }\n\n  /* {@func} getAllEmployees - fetches list of employees and updates the state\n   * @return {Object} Array of objects\n   */\n  getAllEmployees() {\n    return fetch('/api/employees', {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(json => {\n      this.setState({\n        employees: json.data\n      });\n      return json.data;\n    });\n  }\n\n  /* {@func} getAllLocations - fetches list of office locations and updates the state\n   * @return {Object} Array of objects\n   */\n  getAllLocations() {\n    return fetch('/api/locations', {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    }).then(res => res.json()).then(json => {\n      this.setState({\n        locations: json.data\n      });\n      return json.data;\n    }).catch(error => console.error('Error:', error));\n  }\n\n  /* {@func} onEditSubmit - Update an Employee object\n   * @params {Object} data an object containing the fields to update\n   * @return {Object} Array of objects\n   */\n  onCreate(data) {\n    const endpoint = '/api/employees/create';\n    return fetch(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(response => console.log('Success')).catch(error => console.error('Error:', error));\n  }\n\n  /* {@func} onEdit - Update an Employee object\n   * @params {Object} data an object containing the fields to update\n   * @return {Object} Array of objects\n   */\n  onEdit(data) {\n    const endpoint = '/api/employees/' + data.id;\n    return fetch(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(response => console.log('Success')).catch(error => console.error('Error:', error));\n  }\n\n  /* {@func} onDelete - Delete an Employee\n   * @params {Object} id the unique identifier for the employee\n   * @return {Object} Array of objects\n   */\n  onDelete(id) {\n    const endpoint = '/api/employees/' + id + '/delete';\n    return fetch(endpoint, {\n      method: 'DELETE',\n      body: JSON.stringify({\n        data: id\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(response => console.log('Success')).catch(error => console.error('Error:', error));\n  }\n\n  onSearch(query) {\n    window.location.href = '/employees?=' + query;\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/\",\n      component: () => React.createElement(Base, {\n        onSearch: this.onSearch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/employees\",\n      component: () => React.createElement(Employees, {\n        employees: this.state.employees,\n        locations: this.state.locations,\n        category: \"Employees\",\n        onEdit: this.onEdit,\n        onCreate: this.onCreate,\n        onDelete: this.onDelete,\n        getAllEmployees: this.getAllEmployees,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/locations\",\n      component: () => React.createElement(Locations, {\n        locations: this.state.locations,\n        category: \"Locations\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/departments\",\n      component: () => React.createElement(Departments, {\n        departments: this.state.departments,\n        category: \"Departments\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/briana/workspace/employee-directory-web/client/src/App.js"],"names":["React","Component","BrowserRouter","Router","Route","Header","Base","Employees","Locations","Departments","currDepartments","App","constructor","props","state","employees","locations","departments","isLoaded","getAllEmployees","bind","getAllLocations","onEdit","onCreate","onDelete","componentDidMount","setState","loaded","fetch","headers","then","res","json","data","catch","error","console","endpoint","method","body","JSON","stringify","response","log","id","onSearch","query","window","location","href","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\n\n// Internal js imports\nimport Header from './Components/Header';\nimport Base from './Components/Base';\nimport Employees from './Components/Employees';\nimport Locations from './Components/Locations';\nimport Departments from './Components/Departments';\n\n// Internal style imports\nimport './App.scss';\n\n// TODO: include department support in API\nconst currDepartments = [\n  'Department 1',\n  'Department 2',\n  'Department 3'\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      employees: [],\n      locations: [],\n      departments: [],\n      isLoaded: false,\n    };\n\n    this.getAllEmployees = this.getAllEmployees.bind(this);\n    this.getAllLocations = this.getAllLocations.bind(this);\n\n    this.onEdit = this.onEdit.bind(this);\n    this.onCreate = this.onCreate.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n   };\n\n   componentDidMount() {\n     this.getAllEmployees();\n     this.getAllLocations();\n     this.setState({\n       loaded: true,\n       departments: currDepartments\n     });\n   };\n\n   /* {@func} getAllEmployees - fetches list of employees and updates the state\n    * @return {Object} Array of objects\n    */\n    getAllEmployees() {\n      return fetch('/api/employees',\n      {\n        headers : {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      })\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          employees: json.data\n        });\n\n        return json.data;\n      });\n    };\n\n    /* {@func} getAllLocations - fetches list of office locations and updates the state\n     * @return {Object} Array of objects\n     */\n    getAllLocations() {\n      return fetch('/api/locations',\n        {\n          headers : {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          }\n        })\n       .then(res => res.json())\n       .then(json => {\n         this.setState({\n           locations: json.data\n         })\n\n         return json.data;\n       })\n       .catch(error => console.error('Error:', error));\n     };\n\n     /* {@func} onEditSubmit - Update an Employee object\n      * @params {Object} data an object containing the fields to update\n      * @return {Object} Array of objects\n      */\n     onCreate(data) {\n       const endpoint = '/api/employees/create';\n\n       return fetch(endpoint, {\n           method: 'POST',\n           body: JSON.stringify(data),\n           headers: {\n             'Content-Type': 'application/json'\n           }\n         })\n         .then(res => res.json())\n         .then(response => console.log('Success'))\n         .catch(error => console.error('Error:', error));\n   };\n\n     /* {@func} onEdit - Update an Employee object\n      * @params {Object} data an object containing the fields to update\n      * @return {Object} Array of objects\n      */\n     onEdit(data) {\n       const endpoint = '/api/employees/' + data.id;\n\n       return fetch(endpoint, {\n           method: 'PUT',\n           body: JSON.stringify(data),\n           headers: {\n             'Content-Type': 'application/json'\n           }\n         })\n         .then(res => res.json())\n         .then(response => console.log('Success'))\n         .catch(error => console.error('Error:', error));\n   };\n\n   /* {@func} onDelete - Delete an Employee\n    * @params {Object} id the unique identifier for the employee\n    * @return {Object} Array of objects\n    */\n    onDelete(id) {\n      const endpoint = '/api/employees/' + id + '/delete';\n\n      return fetch(endpoint, {\n        method: 'DELETE',\n        body: JSON.stringify({data: id}),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      .then(res => res.json())\n      .then(response => console.log('Success'))\n      .catch(error => console.error('Error:', error));\n    };\n\n    onSearch (query) {\n      window.location.href='/employees?=' + query;\n    }\n\n    render() {\n      return (\n        <Router>\n          <Header />\n          <Route path=\"/\" component={() => <Base\n              onSearch={this.onSearch}\n                />}/>\n\n          <Route path=\"/employees\" component={() => <Employees\n              employees={this.state.employees}\n              locations={this.state.locations}\n              category=\"Employees\"\n\n              onEdit={this.onEdit}\n              onCreate={this.onCreate}\n              onDelete={this.onDelete}\n              getAllEmployees={this.getAllEmployees}\n          />}/>\n\n          <Route path=\"/locations\" component={() => <Locations\n              locations={this.state.locations}\n              category=\"Locations\"\n          />}/>\n\n          <Route path=\"/departments\" component={() => <Departments\n              departments={this.state.departments}\n              category=\"Departments\"\n          />}/>\n      </Router>\n    );\n  }\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}