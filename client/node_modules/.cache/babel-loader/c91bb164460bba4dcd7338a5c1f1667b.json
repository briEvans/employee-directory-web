{"ast":null,"code":"var _jsxFileName = \"/Users/briana/workspace/employee-directory-web/client/src/App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\"; // Internal js imports\n\nimport Header from './Components/Header';\nimport Base from './Components/Base';\nimport List from './Components/List'; // Internal style imports\n\nimport './App.scss'; // TODO: include department support in API\n\nconst currDepartments = ['Department 1', 'Department 2', 'Department 3'];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      employees: [],\n      locations: [],\n      departments: [],\n      isLoaded: false\n    };\n    this.getAllEmployees = this.getAllEmployees.bind(this);\n    this.getAllLocations = this.getAllLocations.bind(this);\n    this.onEdit = this.onEdit.bind(this);\n    this.onCreate = this.onCreate.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n  }\n\n  componentDidMount() {\n    this.getAllEmployees();\n    this.getAllLocations();\n    this.setState({\n      loaded: true,\n      departments: currDepartments\n    });\n  }\n  /* {@func} getAllEmployees - fetches list of employees and updates the state\n   * @return {Object} Array of objects\n   */\n\n\n  getAllEmployees() {\n    return fetch('/api/employees').then(res => res.json()).then(json => {\n      this.setState({\n        employees: json.data\n      });\n      return json.data;\n    });\n  }\n\n  /* {@func} getAllLocations - fetches list of office locations and updates the state\n   * @return {Object} Array of objects\n   */\n  getAllLocations() {\n    return fetch('/api/locations').then(res => res.json()).then(json => {\n      this.setState({\n        locations: json.data\n      });\n      return json.data;\n    });\n  }\n\n  /* {@func} onEditSubmit - Update an Employee object\n   * @params {Object} data an object containing the fields to update\n   * @return {Object} Array of objects\n   */\n  onCreate(data) {\n    const endpoint = '/api/employees/create';\n    return fetch(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(response => console.log('Success')).catch(error => console.error('Error:', error));\n    this.getAllEmployees();\n  }\n\n  /* {@func} onEdit - Update an Employee object\n   * @params {Object} data an object containing the fields to update\n   * @return {Object} Array of objects\n   */\n  onEdit(data) {\n    const endpoint = '/api/employees/' + data.id;\n    return fetch(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(response => console.log('Success')).catch(error => console.error('Error:', error));\n    this.getAllEmployees();\n  }\n\n  /* {@func} onEditSubmit - Update an Employee object\n   * @params {Object} id an object containing the fields to update\n   * @return {Object} Array of objects\n   */\n  onDelete(id) {\n    const endpoint = '/api/employees/:' + id + 'delete';\n    return fetch(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(id),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json()).then(response => console.log('Success')).catch(error => console.error('Error:', error));\n    this.getAllEmployees();\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/\",\n      component: () => React.createElement(Base, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/employees\",\n      component: () => React.createElement(List, {\n        list: this.state.employees,\n        locations: this.state.locations,\n        category: \"Employees\",\n        theme: \"color-Turq\",\n        onEdit: this.onEdit,\n        onCreate: this.onCreate,\n        onDelete: this.onCreate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/locations\",\n      component: () => React.createElement(List, {\n        list: this.state.locations,\n        category: \"Locations\",\n        theme: \"colorGrass\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/departments\",\n      component: () => React.createElement(List, {\n        list: this.state.departments,\n        category: \"Departments\",\n        theme: \"colorLime\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/briana/workspace/employee-directory-web/client/src/App.js"],"names":["React","Component","BrowserRouter","Router","Route","Link","Header","Base","List","currDepartments","App","constructor","props","state","employees","locations","departments","isLoaded","getAllEmployees","bind","getAllLocations","onEdit","onCreate","onDelete","componentDidMount","setState","loaded","fetch","then","res","json","data","endpoint","method","body","JSON","stringify","headers","response","console","log","catch","error","id","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n// Internal js imports\nimport Header from './Components/Header';\nimport Base from './Components/Base';\nimport List from './Components/List';\n\n// Internal style imports\nimport './App.scss';\n\n// TODO: include department support in API\nconst currDepartments = [\n  'Department 1',\n  'Department 2',\n  'Department 3'\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      employees: [],\n      locations: [],\n      departments: [],\n      isLoaded: false,\n    };\n\n    this.getAllEmployees = this.getAllEmployees.bind(this);\n    this.getAllLocations = this.getAllLocations.bind(this);\n    this.onEdit =  this.onEdit.bind(this);\n    this.onCreate =  this.onCreate.bind(this);\n    this.onDelete =  this.onDelete.bind(this);\n   };\n\n   componentDidMount() {\n     this.getAllEmployees();\n     this.getAllLocations();\n     this.setState({\n       loaded: true,\n       departments: currDepartments\n     });\n    }\n\n   /* {@func} getAllEmployees - fetches list of employees and updates the state\n    * @return {Object} Array of objects\n    */\n    getAllEmployees() {\n      return fetch('/api/employees')\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          employees: json.data\n        });\n\n        return json.data;\n      })\n    };\n\n    /* {@func} getAllLocations - fetches list of office locations and updates the state\n     * @return {Object} Array of objects\n     */\n    getAllLocations() {\n      return fetch('/api/locations')\n       .then(res => res.json())\n       .then(json => {\n         this.setState({\n           locations: json.data\n         })\n\n         return json.data;\n       });\n     };\n\n     /* {@func} onEditSubmit - Update an Employee object\n      * @params {Object} data an object containing the fields to update\n      * @return {Object} Array of objects\n      */\n     onCreate(data) {\n       const endpoint = '/api/employees/create';\n\n       return fetch(endpoint, {\n           method: 'POST',\n           body: JSON.stringify(data),\n           headers: {\n             'Content-Type': 'application/json'\n           }\n         })\n         .then(res => res.json())\n         .then(response => console.log('Success'))\n         .catch(error => console.error('Error:', error));\n         this.getAllEmployees();\n   };\n\n     /* {@func} onEdit - Update an Employee object\n      * @params {Object} data an object containing the fields to update\n      * @return {Object} Array of objects\n      */\n     onEdit(data) {\n       const endpoint = '/api/employees/' + data.id;\n\n       return fetch(endpoint, {\n           method: 'PUT',\n           body: JSON.stringify(data),\n           headers: {\n             'Content-Type': 'application/json'\n           }\n         })\n         .then(res => res.json())\n         .then(response => console.log('Success'))\n         .catch(error => console.error('Error:', error));\n         this.getAllEmployees();\n   };\n\n   /* {@func} onEditSubmit - Update an Employee object\n    * @params {Object} id an object containing the fields to update\n    * @return {Object} Array of objects\n    */\n   onDelete(id) {\n     const endpoint = '/api/employees/:' + id + 'delete';\n\n     return fetch(endpoint, {\n         method: 'PUT',\n         body: JSON.stringify(id),\n         headers: {\n           'Content-Type': 'application/json'\n         }\n       })\n       .then(res => res.json())\n       .then(response => console.log('Success'))\n       .catch(error => console.error('Error:', error));\n       this.getAllEmployees();\n };\n\n    render() {\n      return (\n        <Router>\n            <Header />\n              <Route path=\"/\" component={() => <Base/>}\n              />\n            <Route path=\"/employees\" component={() => <List\n              list={this.state.employees}\n              locations={this.state.locations}\n              category=\"Employees\"\n              theme=\"color-Turq\"\n              onEdit={this.onEdit}\n              onCreate={this.onCreate}\n              onDelete={this.onCreate}\n              />}\n            />\n\n            <Route path=\"/locations\" component={() => <List\n                    list={this.state.locations}\n                    category=\"Locations\"\n                    theme=\"colorGrass\"\n                    />}\n                  />\n\n                  <Route path=\"/departments\" component={() => <List\n                        list={this.state.departments}\n                        category=\"Departments\"\n                        theme=\"colorLime\"\n                        />}\n                      />\n        </Router>\n      );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}